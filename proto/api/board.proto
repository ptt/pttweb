syntax = "proto3";

// Copyright (c) 2017, Robert Wang <robertabcd@gmail.com>
// All rights reserved.
//
// The MIT License.

option go_package = "./;api";

package pttbbs.api;

service BoardService {
    rpc Board (BoardRequest) returns (BoardReply) {}
    rpc List (ListRequest) returns (ListReply) {}
    rpc Hotboard (HotboardRequest) returns (HotboardReply) {}
    rpc Content (ContentRequest) returns (ContentReply) {}
    rpc Search (SearchRequest) returns (SearchReply) {}
}

message BoardRequest {
    repeated BoardRef ref = 1;
}

message BoardReply {
    repeated Board boards = 1;
}

message HotboardRequest {
}

message HotboardReply {
    repeated Board boards = 1;
}

message BoardRef {
    oneof ref {
        uint32 bid = 1;
        string name = 2;
    }
}

message Board {
    uint32 bid = 1;
    string name = 2;
    string title = 3;
    string bclass = 4;
    string raw_moderators = 5;
    uint32 parent = 6;
    uint32 num_users = 7;
    uint32 num_posts = 8;
    uint32 attributes = 9;
    repeated uint32 children = 10;
}

message ListRequest {
    BoardRef ref = 1;
    bool include_posts = 2;
    int32 offset = 3;
    int32 length = 4;
    bool include_bottoms = 5;
}

message ListReply {
    repeated Post posts = 1;
    repeated Post bottoms = 2;
}

message Post {
    uint32 index = 1;
    string filename = 2;
    string raw_date = 3;
    int32 num_recommends = 4;
    int32 filemode = 5;
    string owner = 6;
    string title = 7;
    int64 modified_nsec = 8;
}

message ContentRequest {
    BoardRef board_ref = 1;
    string filename = 2;
    string consistency_token = 3;
    PartialOptions partial_options = 4;
}

message PartialOptions {
    enum SelectType {
        SELECT_FULL = 0;
        SELECT_HEAD = 1;
        SELECT_TAIL = 2;
        SELECT_PART = 3;
    }
    SelectType select_type = 1;
    int64 offset = 2;
    int64 max_length = 3;
}

message ContentReply {
    Content content = 1;
}

message Content {
    bytes content = 1;
    string consistency_token = 2;
    int64 offset = 3;
    int64 length = 4;
    int64 total_length = 5;
}

message SearchFilter {
    enum Type {
        TYPE_UNKNOWN = 0;
        TYPE_EXACT_TITLE = 1;
        TYPE_TITLE = 2;
        TYPE_AUTHOR = 3;
        TYPE_RECOMMEND = 4;
        TYPE_MONEY = 5;
        TYPE_MARK = 6;
        TYPE_SOLVED = 7;
    }
    Type type = 1;
    int64 number_data = 2;
    string string_data = 3;
}

message SearchRequest {
    BoardRef ref = 1;
    repeated SearchFilter filter = 2;
    int32 offset = 3;
    int32 length = 4;
}

message SearchReply {
    repeated Post posts = 1;
    int32 total_posts = 2;
}
